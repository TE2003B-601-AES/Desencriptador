-- Company:          ITESM - CQ
-- Engineer:       Alexa Jimena Gonz√°lez Lucio
-- 				  	 Brisa Itzel
				   	
-- Create Date:    20/April/2024 
-- Design Name: 
-- Module Name:    Add Round Key - Decryption
-- Project Name: 	 AES VHDL implementation
-- Target Devices: 
-- Tool versions: 
-- Description: This module gets the after mixingColumns matrix block 
--            	 using a state machine.
-- Dependencies: Cyphered key 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------

-- Library and packages declaration section
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

-- Entity Section
entity InvAddRoundKey is
  Port (Clk     : in     std_logic;
		  Start   : in     std_logic; -- Start flag
        Finish  : out    std_logic; -- End flag
        Key     : in     std_logic_vector (127 downto 0); -- 7-Segment display where received character
		  DataIn  : in     std_logic_vector (127 downto 0);  -- ciphered text
		  DataOut : out    std_logic_vector (127 downto 0); -- After mixColumns matrix block		  
end InvAddRoundKey;

-- Section 3: Define the contents of your entity
architecture InvAddRoundKey_Arch of InvAddRoundKey is
	-- states definition
	type state_values is (S0, S1);
	signal next_state, present_state : state_values;
	
	-- Signals used by the Frequency divider
   constant Fosc      : integer := 50_000_000;     -- Oscillator Frequency for the DE10-Lite board
   constant Fdiv      : integer := 2;              -- Desired Timebase Frequency
   constant CtaMax    : integer := Fosc / Fdiv;    -- Maximum count to obtain desired outputfreq
   signal   Cont      : integer range 0 to CtaMax; -- Define the counter
   signal   Timebase  : std_logic; 					  -- Flag used to indicate that timebase has ellapsed
	
	begin
		-- Frequency divider process to obtain a Timebase signal used by the FSM
		FreqDiv: process(Clk)
		begin
			if Rst = '0' then
				Cont <= 0;
			elsif (rising_edge(Clk)) then
				if Cont = CtaMax - 1 then
					Cont     <= 0;
					Timebase <= '1';
				else 
					Cont	   <= Cont + 1;
					Timebase <= '0';
				end if;
				
			end if;
		end process FreqDiv;
		
		--process to hold each cicle
		process(Clk)
		begin
			if rising_edge(Clk) and Timebase = '1' then
					present_state <= next_state;	
			end if;
		end process;
		
--		-- Define the Next-State Logic Process
--		-- Will obtain the next state based on the inputs and current state
--		FSM: process(present_state)
--		begin
--			
	
end InvAddRoundKey_Arch;

